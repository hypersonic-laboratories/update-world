name: 'Update Helix World'

description: 'Updates a given Helix World'
inputs:
  access_token:
    description: 'Access token for authentication. Can be generated at Account -> Settings'
    required: true
  world_name:
    description: 'You need to provide the world name'
    required: true
  master_endpoint:
    description: 'Defaults to https://api.helixgame.com/v1'
    required: false
    default: 'https://api.helixgame.com/v1'
  config_toml_path:
    description: '[EXPERIMENTAL] Path to config.toml to parse dependencies from'
    required: false
    default: ''
  gamemap:
    description: "Game map"
    required: false
  gamemode:
    description: "Game mode"
    required: false
  title:
    description: "Title of the game"
    required: true
  description:
    description: "Description of the game"
    required: false
  max_players:
    description: "Maximum number of players"
    required: false
  type_id:
    description: "Type ID"
    required: false
  metadata:
    description: "Metadata for the game"
    required: false
  public_settings:
    description: "Public settings"
    required: false
  tags:
    description: "Comma-separated list of tags"
    required: false
  instanceable:
    description: "Whether the game is instanceable"
    required: false
  matchmaking:
    description: "Enable matchmaking"
    required: false
  min_players:
    description: "Minimum number of players"
    required: false
  password:
    description: "Game password"
    required: false
  allow_universal_items:
    description: "Allow universal items"
    required: false
  max_visitor:
    description: "Maximum visitors"
    required: false
  fqdn:
    description: "Fully qualified domain name"
    required: false
  nft_allowlist:
    description: "NFT allowlist"
    required: false
  use_nft_allowlist:
    description: "Use NFT allowlist"
    required: false
  allowlist:
    description: "Enable allowlist"
    required: false
  loading_screen:
    description: "Loading screen"
    required: false
  is_public:
    description: "Is the world public"
    required: false
  links:
    description: "Links for what? I don't know I think it is like social media links"
    required: false
  packages:
    description: "Package dependencies"
    required: false
  full_description:
    description: "Full description of the game"
    required: false
  can_join_during_match:
    description: "Can players join during match"
    required: false
  assets:
    description: "list of assets"
    required: false


runs:
  using: 'composite'
  steps:
    # - name: Checkout repository
    #   uses: actions/checkout@v4
    #   with:
    #     submodules: false
    #     fetch-depth: 1
    #     ref: ${{ inputs.ref }}

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

    - name: Get World Info
      id: get_world_info
      shell: bash
      env:
        WORLD_NAME: ${{ inputs.world_name }}
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
      run: |
        response=$(curl --no-progress-meter --location "${MASTER_ENDPOINT}/world/${WORLD_NAME}" --header "Token: ${ACCESS_TOKEN}")
        echo $response
        code=$(echo $response | jq -r '.code')
        message=$(echo $response | jq -r '.message')
        if [ "$code" != "0" ]; then
          if [ "$message" == "world corrupted" ]; then
            echo "Error: Make sure you've created this world on the HELIX Hub first: https://hub.helixgame.com/creations/worlds"
          else
            echo "Error: Server returned error code $code with message '$message'"
          fi
          exit 1
        fi
        echo "world_id=$(echo $response | jq -r '.payload.id')" >> $GITHUB_OUTPUT
        echo "world_name=$(echo $response | jq -r '.payload.name')" >> $GITHUB_OUTPUT

    - name: Patch World
      id: patch_world
      shell: bash
      env:
        WORLD_ID: ${{ steps.get_world_info.outputs.world_id }}
        WORLD_NAME: ${{ steps.get_world_info.outputs.world_name }}
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
        TITLE: ${{ inputs.title }}
        DESCRIPTION: ${{ inputs.description }}
        MAX_PLAYERS: ${{ inputs.max_players }}
        TYPE_ID: ${{ inputs.type_id }}
        METADATA: ${{ inputs.metadata }}
        PUBLIC_SETTINGS: ${{ inputs.public_settings }}
        TAGS: ${{ inputs.tags }}
        INSTANCEABLE: ${{ inputs.instanceable }}
        MATCHMAKING: ${{ inputs.matchmaking }}
        MIN_PLAYERS: ${{ inputs.min_players }}
        PASSWORD: ${{ inputs.password }}
        ALLOW_UNIVERSAL_ITEMS: ${{ inputs.allow_universal_items }}
        MAX_VISITOR: ${{ inputs.max_visitor }}
        FQDN: ${{ inputs.fqdn }}
        NFT_ALLOWLIST: ${{ inputs.nft_allowlist }}
        USE_NFT_ALLOWLIST: ${{ inputs.use_nft_allowlist }}
        ALLOWLIST: ${{ inputs.allowlist }}
        LOADING_SCREEN: ${{ inputs.loading_screen }}
        IS_PUBLIC: ${{ inputs.is_public }}
        LINKS: ${{ inputs.links }}
        PACKAGES: ${{ inputs.packages }}
        FULL_DESCRIPTION: ${{ inputs.full_description }}
        CAN_JOIN_DURING_MATCH: ${{ inputs.can_join_during_match }}
        ASSETS: ${{ inputs.assets }}
      run: |
        ASSETS="${ASSETS//\'/\"}"
        json_payload="{"
        json_payload+="\"id\": \"$WORLD_ID\","
        [ ! -z "$DESCRIPTION" ] && json_payload+="\"title\": \"$DESCRIPTION\","
        [ ! -z "$TITLE" ] && json_payload+="\"title\": \"$TITLE\","
        [ ! -z "$GAMEMAP" ] && json_payload+="\"gamemap\": \"$GAMEMAP\","
        [ ! -z "$GAMEMODE" ] && json_payload+="\"gamemode\": \"$GAMEMODE\","
        [ ! -z "$TITLE" ] && json_payload+="\"title\": \"$TITLE\","
        [ ! -z "$DESCRIPTION" ] && json_payload+="\"description\": \"$DESCRIPTION\","
        [ ! -z "$MAX_PLAYERS" ] && json_payload+="\"max_players\": $MAX_PLAYERS,"
        [ ! -z "$TYPE_ID" ] && json_payload+="\"type_id\": $TYPE_ID,"
        [ ! -z "$METADATA" ] && json_payload+="\"metadata\": $METADATA,"
        [ ! -z "$PUBLIC_SETTINGS" ] && json_payload+="\"public_settings\": $PUBLIC_SETTINGS,"
        [ ! -z "$TAGS" ] && json_payload+="\"tags\": $(echo "$TAGS" | jq -R '[split(",")]'),"
        [ ! -z "$INSTANCEABLE" ] && json_payload+="\"instanceable\": $INSTANCEABLE,"
        [ ! -z "$MATCHMAKING" ] && json_payload+="\"matchmaking\": $MATCHMAKING,"
        [ ! -z "$MIN_PLAYERS" ] && json_payload+="\"min_players\": $MIN_PLAYERS,"
        [ ! -z "$PASSWORD" ] && json_payload+="\"password\": \"$PASSWORD\","
        [ ! -z "$ALLOW_UNIVERSAL_ITEMS" ] && json_payload+="\"allow_universal_items\": $ALLOW_UNIVERSAL_ITEMS,"
        [ ! -z "$MAX_VISITOR" ] && json_payload+="\"max_visitor\": $MAX_VISITOR,"
        [ ! -z "$FQDN" ] && json_payload+="\"fqdn\": \"$FQDN\","
        [ ! -z "$NFT_ALLOWLIST" ] && json_payload+="\"nft_allowlist\": \"$NFT_ALLOWLIST\","
        [ ! -z "$USE_NFT_ALLOWLIST" ] && json_payload+="\"use_nft_allowlist\": $USE_NFT_ALLOWLIST,"
        [ ! -z "$ALLOWLIST" ] && json_payload+="\"allowlist\": $ALLOWLIST,"
        [ ! -z "$LOADING_SCREEN" ] && json_payload+="\"loading_screen\": \"$LOADING_SCREEN\","
        [ ! -z "$IS_PUBLIC" ] && json_payload+="\"is_public\": $IS_PUBLIC,"
        [ ! -z "$LINKS" ] && json_payload+="\"links\": $LINKS,"
        [ ! -z "$PACKAGES" ] && json_payload+="\"packages\": $PACKAGES,"
        [ ! -z "$FULL_DESCRIPTION" ] && json_payload+="\"full_description\": \"$FULL_DESCRIPTION\","
        [ ! -z "$CAN_JOIN_DURING_MATCH" ] && json_payload+="\"can_join_during_match\": $CAN_JOIN_DURING_MATCH,"
        [ ! -z "$PACKAGES" ] && json_payload+="\"packages\": $PACKAGES,"
        [ ! -z "$ASSETS" ] && json_payload+="\"assets\": $ASSETS,"
        json_payload=$(echo "$json_payload" | sed 's/,$//')"}"
        echo -e "\n"
        echo "Generated JSON Payload: $json_payload"
        echo -e "\n"
        response=$(curl --no-progress-meter --request PATCH --location "${MASTER_ENDPOINT}/world" --header 'Content-Type: application/json' --header "Token: ${ACCESS_TOKEN}" --data "$json_payload")
        code=$(echo $response | jq -r '.code')
        message=$(echo $response | jq -r '.message')
        if [ "$code" != "0" ]; then
          echo "Error: Server returned error code $code with message '$message'"
          exit 1
        fi
        echo $response

